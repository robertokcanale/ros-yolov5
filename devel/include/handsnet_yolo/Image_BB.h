// Generated by gencpp from file handsnet_yolo/Image_BB.msg
// DO NOT EDIT!


#ifndef HANDSNET_YOLO_MESSAGE_IMAGE_BB_H
#define HANDSNET_YOLO_MESSAGE_IMAGE_BB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <handsnet_yolo/BB.h>

namespace handsnet_yolo
{
template <class ContainerAllocator>
struct Image_BB_
{
  typedef Image_BB_<ContainerAllocator> Type;

  Image_BB_()
    : bb_number(0)
    , bb_array()  {
    }
  Image_BB_(const ContainerAllocator& _alloc)
    : bb_number(0)
    , bb_array(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _bb_number_type;
  _bb_number_type bb_number;

   typedef std::vector< ::handsnet_yolo::BB_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::handsnet_yolo::BB_<ContainerAllocator> >::other >  _bb_array_type;
  _bb_array_type bb_array;





  typedef boost::shared_ptr< ::handsnet_yolo::Image_BB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handsnet_yolo::Image_BB_<ContainerAllocator> const> ConstPtr;

}; // struct Image_BB_

typedef ::handsnet_yolo::Image_BB_<std::allocator<void> > Image_BB;

typedef boost::shared_ptr< ::handsnet_yolo::Image_BB > Image_BBPtr;
typedef boost::shared_ptr< ::handsnet_yolo::Image_BB const> Image_BBConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handsnet_yolo::Image_BB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handsnet_yolo::Image_BB_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::handsnet_yolo::Image_BB_<ContainerAllocator1> & lhs, const ::handsnet_yolo::Image_BB_<ContainerAllocator2> & rhs)
{
  return lhs.bb_number == rhs.bb_number &&
    lhs.bb_array == rhs.bb_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::handsnet_yolo::Image_BB_<ContainerAllocator1> & lhs, const ::handsnet_yolo::Image_BB_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace handsnet_yolo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsnet_yolo::Image_BB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handsnet_yolo::Image_BB_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsnet_yolo::Image_BB_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e36224c45647457f9e206d30e8546220";
  }

  static const char* value(const ::handsnet_yolo::Image_BB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe36224c45647457fULL;
  static const uint64_t static_value2 = 0x9e206d30e8546220ULL;
};

template<class ContainerAllocator>
struct DataType< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handsnet_yolo/Image_BB";
  }

  static const char* value(const ::handsnet_yolo::Image_BB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 bb_number\n"
"handsnet_yolo/BB[] bb_array\n"
"================================================================================\n"
"MSG: handsnet_yolo/BB\n"
"string obj_class\n"
"float32 confidence\n"
"float32[] coordinates\n"
;
  }

  static const char* value(const ::handsnet_yolo::Image_BB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bb_number);
      stream.next(m.bb_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Image_BB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handsnet_yolo::Image_BB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handsnet_yolo::Image_BB_<ContainerAllocator>& v)
  {
    s << indent << "bb_number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bb_number);
    s << indent << "bb_array[]" << std::endl;
    for (size_t i = 0; i < v.bb_array.size(); ++i)
    {
      s << indent << "  bb_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::handsnet_yolo::BB_<ContainerAllocator> >::stream(s, indent + "    ", v.bb_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDSNET_YOLO_MESSAGE_IMAGE_BB_H
